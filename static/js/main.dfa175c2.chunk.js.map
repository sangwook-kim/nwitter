{"version":3,"sources":["fbase.ts","components/AuthForm.tsx","components/Nweet.tsx","routes/Profile.tsx","routes/Auth.tsx","components/NweetFactory.tsx","routes/Home.tsx","components/Navigation.tsx","components/Router.tsx","components/App.tsx","index.tsx"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","inputNames","firebaseInstance","authService","dbService","storageService","Nweet","nweet","isOwner","text","attachmentURL","useState","isEditing","setIsEditing","newNweet","setNewNweet","onClickDelete","a","window","confirm","doc","id","delete","refFromURL","toggleEditing","prev","onSubmitNewNweet","e","preventDefault","update","className","onSubmit","name","placeholder","value","required","onChange","currentTarget","autoFocus","maxLength","type","onClick","src","alt","icon","faTrash","faPencilAlt","Profile","refreshUser","userObj","nweets","setNweets","displayName","newDisplayName","setNewDisplayName","history","useHistory","onClickLogOut","signOut","push","useEffect","collection","where","uid","orderBy","limit","get","myNweetSnapShot","myNweets","docs","forEach","nweetData","data","getMyNweets","updateDisplayName","style","marginTop","map","key","userID","AuthForm","email","setEmail","password","setPassword","error","setError","newAccount","setNewAccount","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","Auth","onSocialClick","provider","auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","faTwitter","color","size","marginBottom","faGoogle","faGithub","NweetFactory","setNweet","imgFileData","setImgFileData","uploadedFileURL","uploadRef","ref","child","uuid","putString","uploadRes","getDownloadURL","createdAt","Date","now","add","htmlFor","faPlus","accept","files","file2upload","reader","FileReader","onloadend","result","toString","readAsDataURL","opacity","backgroundImage","faTimes","Home","onSnapshot","sanpshot","newNweets","sort","b","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","maxWidth","width","margin","exact","path","App","fbaseInit","setFbaseInit","setUserObj","onAuthStateChanged","user","updateProfile","newUserObj","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfa175c2.chunk.js","sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDERID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\n","import React, { FormEvent, useState } from 'react';\nimport { FirebaseError } from 'firebase';\nimport { authService } from '@/fbase';\n\nenum inputNames {\n  'email' = 'email',\n  'password' = 'password',\n}\n\nconst AuthForm: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState<FirebaseError>();\n  const [newAccount, setNewAccount] = useState(true);\n\n  const onChange = (e: FormEvent<HTMLInputElement>) => {\n    const {\n      currentTarget: { name, value },\n    } = e;\n\n    if (name === inputNames.email) {\n      setEmail(value);\n    } else if (name === inputNames.password) {\n      setPassword(value);\n    }\n  };\n\n  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    try {\n      if (newAccount) {\n        await authService.createUserWithEmailAndPassword(email, password);\n      } else {\n        await authService.signInWithEmailAndPassword(email, password);\n      }\n    } catch (e) {\n      setError(e);\n    }\n  };\n\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          type=\"email\"\n          name={inputNames.email}\n          placeholder=\"Email\"\n          required\n          onChange={onChange}\n          value={email}\n          className=\"authInput\"\n        />\n        <input\n          type=\"password\"\n          name={inputNames.password}\n          placeholder=\"Password\"\n          required\n          onChange={onChange}\n          value={password}\n          className=\"authInput\"\n        />\n        <input type=\"submit\" className=\"authInput authSubmit\" value={newAccount ? 'Create Account' : 'Log In'} />\n        {error && <span className=\"authError\">{error.message}</span>}\n      </form>\n      <span className=\"authSwitch\" onClick={toggleAccount}>\n        {newAccount ? 'Sign in' : 'Create New Account'}\n      </span>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import { dbService, storageService } from '@/fbase';\nimport React, { FormEvent, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash, faPencilAlt } from '@fortawesome/free-solid-svg-icons';\n\ninterface INweetProps {\n  nweet: NweetObj;\n  isOwner: boolean;\n}\n\nconst Nweet: React.FC<INweetProps> = ({ nweet, isOwner }) => {\n  const { text, attachmentURL } = nweet;\n  const [isEditing, setIsEditing] = useState(false);\n  const [newNweet, setNewNweet] = useState(text);\n\n  const onClickDelete = async () => {\n    const ok = window.confirm('Are you sure to delete this nweet?');\n    if (ok) {\n      await dbService.doc(`nweets/${nweet.id}`).delete();\n      if (nweet.attachmentURL) {\n        await storageService.refFromURL(nweet.attachmentURL).delete();\n      }\n    }\n  };\n\n  const toggleEditing = () => setIsEditing((prev) => !prev);\n\n  const onClickEdit = () => {\n    toggleEditing();\n  };\n\n  const onChangeNweetText = (e: FormEvent<HTMLInputElement>) => {\n    setNewNweet(e.currentTarget.value);\n  };\n\n  const onSubmitNewNweet = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    await dbService.doc(`nweets/${nweet.id}`).update({\n      text: newNweet,\n    });\n\n    toggleEditing();\n  };\n\n  return (\n    <div className=\"nweet\">\n      {isEditing && isOwner ? (\n        <form onSubmit={onSubmitNewNweet} className=\"container nweetEdit\">\n          <input\n            name=\"newNweet\"\n            placeholder=\"Edit your nweet\"\n            value={newNweet}\n            required\n            onChange={onChangeNweetText}\n            autoFocus\n            maxLength={320}\n            className=\"formInput\"\n          />\n          <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n            Cancel\n          </span>\n        </form>\n      ) : (\n        <>\n          <h4>{text}</h4>\n          {attachmentURL && <img src={attachmentURL} alt=\"nweet attachment\" />}\n          {isOwner && (\n            <div className=\"nweet__actions\">\n              <span onClick={onClickDelete}>\n                <FontAwesomeIcon icon={faTrash} />\n              </span>\n              <span onClick={onClickEdit}>\n                <FontAwesomeIcon icon={faPencilAlt} />\n              </span>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Nweet;\n","import Nweet from '@/components/Nweet';\nimport { authService, dbService } from '@/fbase';\nimport React, { FormEvent, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\ninterface IProfileProps {\n  userObj: UserObj;\n  refreshUser: () => void;\n}\n\nconst Profile: React.FC<IProfileProps> = ({ refreshUser, userObj }) => {\n  const [nweets, setNweets] = useState<NweetObj[]>([]);\n  const [newDisplayName, setNewDisplayName] = useState<string>(userObj.displayName || '');\n\n  const history = useHistory();\n  const onClickLogOut = async () => {\n    await authService.signOut();\n    history.push('/');\n  };\n\n  useEffect(() => {\n    const getMyNweets = async () => {\n      const myNweetSnapShot = await dbService\n        .collection('nweets')\n        .where('userID', '==', userObj.uid)\n        .orderBy('createdAt', 'desc')\n        .limit(10)\n        .get();\n      const myNweets: NweetObj[] = [];\n\n      myNweetSnapShot.docs.forEach((doc) => {\n        const nweetData = {\n          ...doc.data(),\n          id: doc.id,\n        } as NweetObj;\n\n        myNweets.push(nweetData);\n      });\n      // setNweets(myNweets.sort((a, b) => b.createdAt - a.createdAt));\n      setNweets(myNweets);\n    };\n\n    void getMyNweets();\n  }, [userObj.uid]);\n\n  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (userObj.displayName === newDisplayName) return;\n    await userObj.updateDisplayName(newDisplayName);\n    refreshUser();\n  };\n\n  const onChangeDisplayName = (e: FormEvent<HTMLInputElement>) => {\n    const {\n      currentTarget: { value },\n    } = e;\n\n    setNewDisplayName(value);\n  };\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} className=\"profileForm\">\n        <input\n          type=\"text\"\n          autoFocus\n          placeholder=\"Display Name\"\n          value={newDisplayName}\n          onChange={onChangeDisplayName}\n          className=\"formInput\"\n        />\n        <input\n          type=\"submit\"\n          value=\"Update Profile\"\n          className=\"formBtn\"\n          style={{\n            marginTop: 10,\n          }}\n        />\n      </form>\n      <span className=\"formBtn cancelBtn logOut\" onClick={onClickLogOut}>\n        Log Out\n      </span>\n      <div style={{ marginTop: '20px' }}>\n        {nweets.map((nweet: NweetObj) => (\n          <Nweet key={nweet.id} nweet={nweet} isOwner={nweet.userID === userObj.uid} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { FormEvent } from 'react';\nimport { authService, firebaseInstance } from '@/fbase';\nimport AuthForm from '@/components/AuthForm';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter, faGoogle, faGithub } from '@fortawesome/free-brands-svg-icons';\n\nconst Auth: React.FC = () => {\n  const onSocialClick = async (e: FormEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = e;\n    let provider;\n    if (name === 'google') {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === 'github') {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n\n    provider && (await authService.signInWithPopup(provider));\n  };\n\n  return (\n    <div className=\"authContainer\">\n      <FontAwesomeIcon icon={faTwitter} color={'#04AAFF'} size=\"3x\" style={{ marginBottom: 30 }} />\n      <AuthForm />\n      <div className=\"authBtns\">\n        <button name=\"google\" onClick={onSocialClick} className=\"authBtn\">\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\n        </button>\n        <button name=\"github\" onClick={onSocialClick} className=\"authBtn\">\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Auth;\n","import { v4 as uuid } from 'uuid';\nimport { storageService, dbService } from '@/fbase';\nimport React, { FormEvent, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\n\ninterface NweetFactoryProps {\n  userObj: UserObj;\n}\n\nconst NweetFactory: React.FC<NweetFactoryProps> = ({ userObj }) => {\n  const [nweet, setNweet] = useState<string>('');\n  const [imgFileData, setImgFileData] = useState<string>('');\n\n  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (nweet === '') {\n      return;\n    }\n\n    let uploadedFileURL = '';\n    if (imgFileData) {\n      const uploadRef = storageService.ref().child(`${userObj.uid}/${uuid()}`);\n      const uploadRes = await uploadRef.putString(imgFileData, 'data_url');\n\n      uploadedFileURL = (await uploadRes.ref.getDownloadURL()) as string;\n    }\n\n    const newNweet: NweetPostObj = {\n      text: nweet,\n      createdAt: Date.now(),\n      userID: userObj?.uid || '',\n      attachmentURL: uploadedFileURL,\n    };\n\n    await dbService.collection('nweets').add(newNweet);\n\n    setImgFileData('');\n    setNweet('');\n  };\n\n  const onChange = (e: FormEvent<HTMLInputElement>) => {\n    const {\n      currentTarget: { value },\n    } = e;\n\n    setNweet(value);\n  };\n\n  const onChangeFile = (e: FormEvent<HTMLInputElement>) => {\n    const {\n      currentTarget: { files },\n    } = e;\n    const file2upload = files?.[0] || null;\n\n    if (!file2upload) return;\n\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      const { result } = reader;\n      setImgFileData(result?.toString() || '');\n    };\n\n    reader.readAsDataURL(file2upload);\n  };\n\n  const onClickClearPhoto = () => {\n    setImgFileData('');\n  };\n\n  return (\n    <form onSubmit={onSubmit} className=\"factoryForm\">\n      <div className=\"factoryInput__container\">\n        <input\n          className=\"factoryInput__input\"\n          type=\"text\"\n          placeholder=\"What's on your mind?\"\n          maxLength={320}\n          value={nweet}\n          onChange={onChange}\n        />\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n      </div>\n      <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n        <span>Add photos</span>\n        <FontAwesomeIcon icon={faPlus} />\n      </label>\n      <input id=\"attach-file\" type=\"file\" accept=\"image/*\" onChange={onChangeFile} style={{ opacity: 0 }} />\n      {imgFileData && (\n        <div className=\"factoryForm__attachment\">\n          <img\n            alt=\"user uploading file\"\n            src={imgFileData}\n            style={{\n              backgroundImage: imgFileData,\n            }}\n          />\n          <div className=\"factoryForm__clear\" onClick={onClickClearPhoto}>\n            <span>Remove</span>\n            <FontAwesomeIcon icon={faTimes} />\n          </div>\n        </div>\n      )}\n    </form>\n  );\n};\n\nexport default NweetFactory;\n","import Nweet from '@/components/Nweet';\nimport NweetFactory from '@/components/NweetFactory';\nimport { dbService } from '@/fbase';\nimport React, { useEffect, useState } from 'react';\n\ninterface HomeProps {\n  userObj: UserObj;\n}\n\nconst Home: React.FC<HomeProps> = ({ userObj }) => {\n  const [nweets, setNweets] = useState<NweetObj[]>([]);\n\n  useEffect(() => {\n    dbService.collection('nweets').onSnapshot((sanpshot) => {\n      const newNweets: NweetObj[] = [];\n\n      sanpshot.docs.forEach((doc) => {\n        const nweetData = {\n          ...doc.data(),\n          id: doc.id,\n        } as NweetObj;\n\n        newNweets.push(nweetData);\n      });\n      setNweets(newNweets.sort((a, b) => b.createdAt - a.createdAt));\n    });\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <NweetFactory userObj={userObj} />\n      <div style={{ marginTop: 30 }}>\n        {nweets.map((nweet: NweetObj) => (\n          <Nweet key={nweet.id} nweet={nweet} isOwner={nweet.userID === userObj.uid} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\ninterface INavigationProps {\n  userObj: UserObj;\n}\n\nconst Navigation: React.FC<INavigationProps> = ({ userObj }) => {\n  return (\n    <nav>\n      <ul style={{ display: 'flex', justifyContent: 'center', marginTop: 50 }}>\n        <li>\n          <Link to=\"/\" style={{ marginRight: 10 }}>\n            <FontAwesomeIcon icon={faTwitter} color={'#04AAFF'} size=\"2x\" />\n          </Link>\n        </li>\n        <li>\n          <Link\n            to=\"/profile\"\n            style={{\n              marginLeft: 10,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              fontSize: 12,\n            }}\n          >\n            <FontAwesomeIcon icon={faUser} color={'#04AAFF'} size=\"2x\" />\n            <span style={{ marginTop: 10 }}>\n              {userObj.displayName ? `${userObj.displayName}의 Profile` : 'Profile'}\n            </span>\n          </Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Profile from '@/routes/Profile';\nimport Auth from '../routes/Auth';\nimport Home from '../routes/Home';\nimport Navigation from './Navigation';\n\ninterface IAppRouterProps {\n  userObj: UserObj | null;\n  refreshUser: () => void;\n}\n\nconst AppRouter: React.FC<IAppRouterProps> = ({ refreshUser, userObj }) => {\n  return (\n    <Router>\n      {!!userObj && <Navigation userObj={userObj} />}\n      <Switch>\n        {userObj ? (\n          <div\n            style={{\n              maxWidth: 890,\n              width: '100%',\n              margin: '0 auto',\n              marginTop: 80,\n              display: 'flex',\n              justifyContent: 'center',\n            }}\n          >\n            <Route exact path=\"/\">\n              <Home userObj={userObj} />\n            </Route>\n            <Route exact path=\"/profile\">\n              <Profile refreshUser={refreshUser} userObj={userObj} />\n            </Route>\n          </div>\n        ) : (\n          <Route exact path=\"/\">\n            <Auth />\n          </Route>\n        )}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import React, { useEffect, useState } from 'react';\nimport AppRouter from '@/components/Router';\nimport { authService } from '@/fbase';\n\nconst App: React.FC = () => {\n  const [fbaseInit, setFbaseInit] = useState(false);\n  const [userObj, setUserObj] = useState<UserObj | null>(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      setUserObj(\n        user\n          ? {\n              displayName: user.displayName,\n              uid: user.uid,\n              updateDisplayName: (displayName: string) => user.updateProfile({ displayName }),\n            }\n          : null\n      );\n      setFbaseInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const newUserObj = authService.currentUser;\n\n    if (!newUserObj) return;\n\n    setUserObj({\n      displayName: newUserObj.displayName || null,\n      uid: newUserObj.uid,\n      updateDisplayName: (displayName: string) => newUserObj.updateProfile({ displayName }),\n    });\n  };\n\n  return (\n    <>\n      {fbaseInit ? <AppRouter refreshUser={refreshUser} userObj={userObj} /> : '...'}\n      {/*\n      <footer>&copy; {new Date().getFullYear()} Nwitter</footer>\n      */}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '@/components/App';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}